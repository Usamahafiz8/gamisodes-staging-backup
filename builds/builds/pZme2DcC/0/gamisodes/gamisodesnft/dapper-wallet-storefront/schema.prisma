// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}


enum WalletState {
  CREATION_FAILED
  PENDING_CREATION
  READY
  UNVERIFIED
  VERIFIED
}
model Wallet {
  id        String @id @default(cuid())
  address   String @unique
  user      User   @relation(fields: [userEmail], references: [email])
  userEmail String @unique
}

model CustodialWallet {
  id              String @id @default(cuid())
  niftoryWalletId String @unique
  user            User   @relation(fields: [userEmail], references: [email])
  userEmail       String @unique
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  wallet          Wallet?
  custodialWallet CustodialWallet?
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
